<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<description>Shiro 配置文件</description>
	
	<!-- 会话Session ID生成器 -->
	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

	<!-- 会话Cookie模板 -->
	<bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!--cookie的name -->
	    <constructor-arg name="name" value="ltd-s-qcwifi"/>
	    <property name="httpOnly" value="true"/>
	    <!--cookie的有效时间 -->
	    <property name="maxAge" value="-1"/>
	    <!-- 配置存储Session Cookie的domain为 一级域名-->
	    <property name="domain" value=".qcwifi.ltd"/>
	</bean>
	
	<!-- custom shiro session listener -->
	<bean id="customSessionListener" class="ltd.qcwifi.shiro.listenter.CustomSessionListener">
	    <property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
	</bean>
	
	<!-- 用户信息记住我功能的相关配置 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
	    <constructor-arg name="name" value="ltd-re-qcwifi"/>
	    <property name="httpOnly" value="true"/>
	    <!-- 配置存储rememberMe Cookie的domain为 一级域名-->
	    <property name="domain" value=".qcwifi.ltd"/>
	    <property name="maxAge" value="2592000"/><!-- 30天时间，记住我30天 -->
	</bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!--cookie加密的密钥-->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('dl92LXMtbHRkLnFjd2lmaQ==')}"/>
        <property name="cookie" ref="rememberMeCookie" />
    </bean>
 	
 	
	<!-- custom shiro session listener -->
	<bean id="customShiroSessionDAO" class="ltd.qcwifi.shiro.CustomShiroSessionDAO">
	    <property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean>
	
	<!-- 手动操作Session，管理Session -->
	<bean id="customSessionManager" class="ltd.qcwifi.shiro.session.CustomSessionManager">
		<property name="shiroSessionRepository" ref="jedisShiroSessionRepository"/>
		 <property name="customShiroSessionDAO" ref="customShiroSessionDAO"/>
	</bean>
 
	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		 <!-- 间隔多少时间检查，不配置是60分钟 -->
	     <property name="interval" value="18000000"/>
	     <property name="sessionManager" ref="sessionManager"/>
	</bean>
	
	<!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="sampleRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
        <property name="cacheManager" ref="customShiroCacheManager"/>
    </bean>
    
	<!-- 用户缓存 -->
	<bean id="customShiroCacheManager" class="ltd.qcwifi.shiro.cache.impl.CustomShiroCacheManager">
	    <property name="shiroCacheManager" ref="jedisShiroCacheManager"/>
	</bean>
	
	<!-- shiro 缓存实现，对ShiroCacheManager，采用redis的实现 -->
	<bean id="jedisShiroCacheManager" class="ltd.qcwifi.shiro.cache.impl.JedisShiroCacheManager">
	    <property name="jedisManager" ref="jedisManager"/>
	</bean>
	
	<!-- redis 的缓存 -->
	<bean id="jedisManager" class="ltd.qcwifi.shiro.cache.JedisManager">
	    <property name="jedisPool" ref="jedisPool"/>
	</bean>
	
	<!-- 静态注入，相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
	    <property name="arguments" ref="securityManager"/>
	</bean>
	
	<!-- session 校验单个用户是否多次登录 -->
<!-- 	<bean id="kickoutSessionFilter" class="ltd.qcwifi.shiro.filter.KickoutSessionFilter">   -->
<!-- 	    <property name="kickoutUrl" value="/u/login.shtml?kickout"/>   -->
<!-- 	</bean>  -->
	 
	<!-- 静态注入 jedisShiroSessionRepository-->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="ltd.qcwifi.shiro.filter.KickoutSessionFilter.setShiroSessionRepository"/>
	    <property name="arguments" ref="jedisShiroSessionRepository"/>
	</bean>
	
	
	<!-- 数据库保存的密码是使用MD5算法加密的，所以这里需要配置一个密码匹配对象 -->
	<bean id="credentialsMatcher"
		class="ltd.qcwifi.shiro.credetials.RetryLimitHashedCredentialsMatcher">
		<constructor-arg ref="customShiroCacheManager"/>
		<property name="hashAlgorithmName" value="MD5"></property>
		<property name="hashIterations" value="5"></property>
		<property name="storedCredentialsHexEncoded" value="true" />
	</bean>
	
	<!-- 授权 认证 -->
	<bean id="sampleRealm" class="ltd.qcwifi.shiro.token.SampleRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher"/>
<!-- 		<property name="cachingEnabled" value="true" /> -->
<!-- 		<property name="authenticationCachingEnabled" value="true" /> -->
<!-- 		<property name="authenticationCacheName" value="authenticationCache" /> -->
<!-- 		<property name="authorizationCachingEnabled" value="true" /> -->
<!-- 		<property name="authorizationCacheName" value="authorizationCache" /> -->
	</bean>


	
	
	<!-- Session Manager -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 相隔多久检查一次session的有效性 -->
		<property name="sessionValidationInterval" value="1800000" />
		<!-- session 有效时间为半小时 （毫秒单位） -->
		<property name="globalSessionTimeout" value="1800000" />
		<property name="sessionDAO" ref="customShiroSessionDAO" />
		<!-- session 监听，可以多个。 -->
		<property name="sessionListeners">
			<list>
				<ref bean="customSessionListener" />
			</list>
		</property>
		<!-- 间隔多少时间检查，不配置是60分钟 -->
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler" />
		<!-- 是否开启 检测，默认开启 -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<!-- 是否删除无效的，默认也是开启 -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- 会话Cookie模板 -->
		<property name="sessionIdCookie" ref="sessionIdCookie" />
	</bean>
	
	<!-- session 创建、删除、查询 -->
	<bean id="jedisShiroSessionRepository" class="ltd.qcwifi.shiro.cache.JedisShiroSessionRepository" >
		 <property name="jedisManager" ref="jedisManager"/>
	</bean>

	<!--
		自定义角色过滤器 支持多个角色可以访问同一个资源 eg:/home.jsp = authc,roleOR[admin,user]
		用户有admin或者user角色 就可以访问
	-->
	
	<!-- 认证数据库存储-->
    <bean id="shiroManager" class="ltd.qcwifi.shiro.service.impl.ShiroManagerImpl"/>
<!--     <bean id="login" class="ltd.qcwifi.shiro.filter.LoginFilter"/> -->
<!--     <bean id="role" class="ltd.qcwifi.shiro.filter.RoleFilter"/> -->
<!--     <bean id="permission" class="ltd.qcwifi.shiro.filter.PermissionFilter"/> -->
<!--     <bean id="simple" class="ltd.qcwifi.shiro.filter.SimpleAuthFilter"/> -->
	
	
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login/index" />
		<property name="unauthorizedUrl" value="/error/unauthorized" />
		
		<!-- 读取初始自定义权限内容-->
       <property name="filterChainDefinitions" value="#{shiroManager.loadFilterChainDefinitions()}"/>   
       <property name="filters">
           <util:map>
              <entry key="login" value-ref="loginFilter"/>
              <entry key="role" value-ref="roleFilter"/>
              <entry key="simple" value-ref="simpleAuthFilter"/>
              <entry key="permission" value-ref="permissionFilter"/>
              <entry key="kickout" value-ref="kickoutSessionFilter"/>
           </util:map>
       </property>
	</bean>
	
	<!-- Shiro生命周期处理器-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	<!-- ============================================================================ -->
	 

</beans>
